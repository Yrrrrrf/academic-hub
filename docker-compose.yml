version: '3.8'

services:
  db:
    build:
      context: ./backend
      dockerfile: db.Dockerfile  # PostgreSQL database
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=some_user
      - POSTGRES_PASSWORD=some_password
      - POSTGRES_DB=academic_hub

  api:
    build: 
      context: ./backend
      dockerfile: api.Dockerfile  # API server
    ports:
      - "8000:8000"  # Expose the API server on port 8000
    depends_on:
      - db  # Ensure the database is ready before starting the API
    environment:
      - DB_NAME=academic_hub
      - DB_HOST=db
      - DB_OWNER_ADMIN=academic_hub_owner
      - DB_OWNER_PWORD=some_password

  hub:
    build: 
      context: ./frontend
      dockerfile: hub.Dockerfile  # HUB (web app)
    ports:
      # todo: update the port number to match the frontend app
      - "3000:3000"
    depends_on:
      - api

volumes:
  postgres_data:
    name: academic_hub_postgres_data
    labels:
      - "project=academic_hub"
      - "environment=development"


# Additional explanations:
# 1. The backend service uses a multi-stage build process defined in its Dockerfile.
# 2. The frontend service assumes a simple build process, likely using Node.js and npm/yarn.
# 3. The db service uses the official PostgreSQL image, which comes with built-in initialization features.
# 4. Environment variables are used to configure services without hardcoding values in Dockerfiles.
# 5. The command for the backend service is a shell script that ensures proper startup sequencing.
